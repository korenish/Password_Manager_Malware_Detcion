import pefile
import lief


content = set()
with open("..\\resources\\suspicious_functions.txt", "rb") as f:
    content = set(x.decode("utf-8") for x in (line.strip() for line in f) if x)
SUSPICIOUS_FUNCTIONS_INPUT = content


class ExtractFeaturesFromSamplePE:
    def __init__(self, sample_sha256, sample_path):
        self.sample_pe = pefile.PE(sample_path)
        self.lief_pe = lief.parse(sample_path)
        self.sample_sha256 = sample_sha256

        # Initialize default value features
        self.pe_features = {
            'imphash': None,
            'rich_header': None,
            'declared_dll_imports': [],
            'suspicious_functions_imports': [],
            'export_functions': []
        }

    def extract(self):
        self.pe_features['imphash'], self.pe_features['rich_header'] = self.extract_basic_pe_info()
        self.pe_features['declared_dll_imports'] = self.extract_pe_import_dlls()
        self.pe_features['suspicious_functions_imports'] = self.extract_suspicious_functions()
        self.pe_features['export_functions'] = self.extract_export_functions()

        return self.pe_features

    def extract_basic_pe_info(self):
        if self.sample_pe.parse_rich_header():
            return self.sample_pe.get_imphash(), self.sample_pe.parse_rich_header()['key']

        return self.sample_pe.get_imphash(), None

    def extract_pe_import_dlls(self):
        dll_libraries = []

        for crr_import_library in self.sample_pe.DIRECTORY_ENTRY_IMPORT:
            curr_library_name = crr_import_library.dll.decode("utf-8")
            dll_libraries.append(curr_library_name)

        return dll_libraries

    def extract_suspicious_functions(self):
        imported_sus_functions = []

        for imported_library in self.lief_pe.imports:
            for func in imported_library.entries:
                if func in SUSPICIOUS_FUNCTIONS_INPUT:
                    imported_sus_functions.append(func)

        return imported_sus_functions

    def extract_export_functions(self):
        export_functions = []

        for exported_library in self.lief_pe.exports:
            count = count + 1
            print(exported_library.name)
            for func in exported_library.entries:
                export_functions.append(func.name)

        return export_functions


import pickle
import time

import requests

RESULT_FILE_PATH = "..\\..\\resources\\processed_data.pkl"

VT_API_KEYS = ["71fd05c1b79164c2feb763cbecfe4fe6f84348b2e6ba1f1c21cdb42a6db96eab",
               "2cf3d4d1536fdfae247c508b4255e60e9b0b72e32a193a5168130c37d4dfecfd",
               "94a22a610ea04217b4532a1d450b99050c7e077c30302be3523d1b1e0bfd29a1"]

VT_BASE_URL = "https://www.virustotal.com/api/v3/files/"

REQUESTS_PER_MINUTE_PER_KEY = 3


def run_single_request_mitre_ttps(sha256, api_key):
    mitre_ttps_url = VT_BASE_URL + f"{sha256}/behaviour_mitre_trees"
    headers = {
        "x-apikey": api_key,
        "User-Agent": "vtscan v.1.0",
        "Accept-Encoding": "gzip, deflate"
    }
    try:
        res = requests.get(mitre_ttps_url, headers=headers)
    except:
        print("failed to get info, cannot send API req :(")
    else:
        if res.status_code == 200:
            try:
                result = res.json()
                return result.get("data")
            except:
                print("Sha without Mitre signatures detected, ignoring")
        else:
            print(f"failed to get results of analysis - status code: {str(res.status_code)}")


def process_and_append(sha, mitre_ttps, result_obj):
    extracted_tactics = set(())  # using set to keep these unique
    extracted_techniques = set(())  # using set to keep these unique
    for sand_box in mitre_ttps.keys():
        tactics = mitre_ttps[sand_box]["tactics"]
        if tactics:
            for tactic in tactics:
                extracted_tactics.add(tactic["id"])
                techniques = tactic["techniques"]
                if techniques:
                    for technique in techniques:
                        extracted_techniques.add(technique["id"])
    append_to_result(result_obj, sha, extracted_tactics, extracted_techniques)

    print(f"Done processing sha {sha}, found {len(extracted_tactics)} tactics and {len(extracted_techniques)} techniques")



def append_to_result(result_obj, sha, extracted_tactics_set, extracted_techniques_set):
    result_obj["SHAS"].append({"sha": sha,
                         "tactics": list(extracted_tactics_set),
                         "techniques": list(extracted_techniques_set)})


def fetch_and_save_data_from_vt(all_samples_sha256: list):
    result_obj = {"SHAS": []}
    curr_api_key_index = 0
    for sha in all_samples_sha256:
        curr_api_key = VT_API_KEYS[curr_api_key_index]
        mitre_ttps = run_single_request_mitre_ttps(sha, curr_api_key)
        if mitre_ttps is not None:
            process_and_append(sha, mitre_ttps, result_obj)
        curr_api_key_index = (curr_api_key_index + 1) % len(VT_API_KEYS)
        sleep_if_needed(curr_api_key_index)
    with open(RESULT_FILE_PATH, "wb") as fp:
        pickle.dump(result_obj, fp)
        print("Done and saved!")


def sleep_if_needed(curr_api_key_index):
    if curr_api_key_index == 0:
        print(f"Sleeping {str(60 / REQUESTS_PER_MINUTE_PER_KEY)} seconds!")
        time.sleep(60 / REQUESTS_PER_MINUTE_PER_KEY)
